/*
 * Copyright (C) 2024 Vladimir Vaskov
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <https://www.gnu.org/licenses/>.
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 */

// THIS FILE WAS GENERATED, DON'T MODIFY IT

/**
 * Represents a remote file
 */
public class TDLib.RemoteFile : Error {

    /**
     * Remote file identifier; may be empty. Can be used by the current user
     * across application restarts or even from other devices. Uniquely
     * identifies a file, but a file can have a lot of different valid
     * identifiers.
     * If the identifier starts with "http://" or "https://", it represents
     * the HTTP URL of the file. TDLib is currently unable to download files
     * if only their URL is known.
     * If downloadFile/addFileToDownloads is called on such a file or if it
     * is sent to a secret chat, TDLib starts a file generation process by
     * sending updateFileGenerationStart to the application with the HTTP URL
     * in the original_path and "#url#" as the conversion string.
     * Application must generate the file by downloading it to the specified
     * location
     */
    public string id_ { get; construct set; }

    /**
     * Unique file identifier; may be empty if unknown. The unique file
     * identifier which is the same for the same file even for different
     * users and is persistent over time
     */
    public string unique_id { get; construct set; }

    /**
     * True, if the file is currently being uploaded (or a remote copy is
     * being generated by some other means)
     */
    public bool is_uploading_active { get; construct set; }

    /**
     * True, if a remote copy is fully available
     */
    public bool is_uploading_completed { get; construct set; }

    /**
     * Size of the remote available part of the file, in bytes; 0 if unknown
     */
    public int64 uploaded_size { get; construct set; }

    public RemoteFile (
        string id_,
        string unique_id,
        bool is_uploading_active,
        bool is_uploading_completed,
        int64 uploaded_size
    ) {
        Object (
            id_: id_,
            unique_id: unique_id,
            is_uploading_active: is_uploading_active,
            is_uploading_completed: is_uploading_completed,
            uploaded_size: uploaded_size,
            tdlib_type: "remoteFile",
            tdlib_extra: Uuid.string_random ()
        );
    }
}
