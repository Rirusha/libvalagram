/*
 * Copyright (C) 2024-2025 Vladimir Vaskov
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <https://www.gnu.org/licenses/>.
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 */

// THIS FILE WAS GENERATED, DON'T MODIFY IT

/**
 * Points to a file
 */
public abstract class TDLib.InputFile : Error {}

/**
 * A file defined by its unique identifier
 */
public class TDLib.InputFileId : InputFile {

    /**
     * Unique file identifier
     */
    public int32 id_ { get; construct set; }

    public InputFileId (
        int32 id_
    ) {
        Object (
            id_: id_,
            tdlib_type: "inputFileId",
            tdlib_extra: Uuid.string_random ()
        );
    }
}

/**
 * A file defined by its remote identifier. The remote identifier is
 * guaranteed to be usable only if the corresponding file is still
 * accessible to the user and known to TDLib.
 * For example, if the file is from a message, then the message must be
 * not deleted and accessible to the user. If the file database is
 * disabled, then the corresponding object with the file must be
 * preloaded by the application
 */
public class TDLib.InputFileRemote : InputFile {

    /**
     * Remote file identifier
     */
    public string id_ { get; construct set; }

    public InputFileRemote (
        string id_
    ) {
        Object (
            id_: id_,
            tdlib_type: "inputFileRemote",
            tdlib_extra: Uuid.string_random ()
        );
    }
}

/**
 * A file defined by a local path
 */
public class TDLib.InputFileLocal : InputFile {

    /**
     * Local path to the file
     */
    public string path { get; construct set; }

    public InputFileLocal (
        string path
    ) {
        Object (
            path: path,
            tdlib_type: "inputFileLocal",
            tdlib_extra: Uuid.string_random ()
        );
    }
}

/**
 * A file generated by the application. The application must handle
 * updates updateFileGenerationStart and updateFileGenerationStop to
 * generate the file when asked by TDLib
 */
public class TDLib.InputFileGenerated : InputFile {

    /**
     * Local path to a file from which the file is generated. The path
     * doesn't have to be a valid path and is used by TDLib only to detect
     * name and MIME type of the generated file
     */
    public string original_path { get; construct set; }

    /**
     * String specifying the conversion applied to the original file; must be
     * persistent across application restarts. Conversions beginning with '#'
     * are reserved for internal TDLib usage
     */
    public string conversion { get; construct set; }

    /**
     * Expected size of the generated file, in bytes; pass 0 if unknown
     */
    public int64 expected_size { get; construct set; }

    public InputFileGenerated (
        string original_path,
        string conversion,
        int64 expected_size
    ) {
        Object (
            original_path: original_path,
            conversion: conversion,
            expected_size: expected_size,
            tdlib_type: "inputFileGenerated",
            tdlib_extra: Uuid.string_random ()
        );
    }
}
