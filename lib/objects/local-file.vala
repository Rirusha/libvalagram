/*
 * Copyright (C) 2024 Vladimir Vaskov
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <https://www.gnu.org/licenses/>.
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 */

// THIS FILE WAS GENERATED, DON'T MODIFY IT

/**
 * Represents a local file
 */
public class TDLib.LocalFile : Error {

    /**
     * Local path to the locally available file part; may be empty
     */
    public string path { get; construct set; }

    /**
     * True, if it is possible to download or generate the file
     */
    public bool can_be_downloaded { get; construct set; }

    /**
     * True, if the file can be deleted
     */
    public bool can_be_deleted { get; construct set; }

    /**
     * True, if the file is currently being downloaded (or a local copy is
     * being generated by some other means)
     */
    public bool is_downloading_active { get; construct set; }

    /**
     * True, if the local copy is fully available
     */
    public bool is_downloading_completed { get; construct set; }

    /**
     * Download will be started from this offset. downloaded_prefix_size is
     * calculated from this offset
     */
    public int64 download_offset { get; construct set; }

    /**
     * If is_downloading_completed is false, then only some prefix of the
     * file starting from download_offset is ready to be read.
     * downloaded_prefix_size is the size of that prefix in bytes
     */
    public int64 downloaded_prefix_size { get; construct set; }

    /**
     * Total downloaded file size, in bytes. Can be used only for calculating
     * download progress. The actual file size may be bigger, and some parts
     * of it may contain garbage
     */
    public int64 downloaded_size { get; construct set; }

    public LocalFile (
        string path,
        bool can_be_downloaded,
        bool can_be_deleted,
        bool is_downloading_active,
        bool is_downloading_completed,
        int64 download_offset,
        int64 downloaded_prefix_size,
        int64 downloaded_size
    ) {
        Object (
            path: path,
            can_be_downloaded: can_be_downloaded,
            can_be_deleted: can_be_deleted,
            is_downloading_active: is_downloading_active,
            is_downloading_completed: is_downloading_completed,
            download_offset: download_offset,
            downloaded_prefix_size: downloaded_prefix_size,
            downloaded_size: downloaded_size,
            tdlib_type: "localFile",
            tdlib_extra: Uuid.string_random ()
        );
    }
}
